
rbtft_dsiplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f34  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080020f8  080020f8  000030f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002108  08002108  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002108  08002108  00003108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002110  08002110  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002110  08002110  00003110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002114  08002114  00003114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002118  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  08002124  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08002124  00004084  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006995  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015cb  00000000  00000000  0000a9d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b0  00000000  00000000  0000bfa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004f4  00000000  00000000  0000c650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000202fe  00000000  00000000  0000cb44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000088a2  00000000  00000000  0002ce42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3f6c  00000000  00000000  000356e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f9650  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019dc  00000000  00000000  000f9694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000fb070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080020e0 	.word	0x080020e0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080020e0 	.word	0x080020e0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <define_window>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void define_window(SPI_HandleTypeDef *hspi) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	send_command(hspi, 0x2A); //column address set CASET
 8000538:	212a      	movs	r1, #42	@ 0x2a
 800053a:	6878      	ldr	r0, [r7, #4]
 800053c:	f000 fa2e 	bl	800099c <send_command>
	send_data(hspi, 0x00);
 8000540:	2100      	movs	r1, #0
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f000 fa4c 	bl	80009e0 <send_data>
	send_data(hspi, 0x00);
 8000548:	2100      	movs	r1, #0
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f000 fa48 	bl	80009e0 <send_data>
	send_data(hspi, 0x81);
 8000550:	2181      	movs	r1, #129	@ 0x81
 8000552:	6878      	ldr	r0, [r7, #4]
 8000554:	f000 fa44 	bl	80009e0 <send_data>
	send_data(hspi, 0x81);
 8000558:	2181      	movs	r1, #129	@ 0x81
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f000 fa40 	bl	80009e0 <send_data>

	send_command(hspi, 0x2B); //row address set RASET
 8000560:	212b      	movs	r1, #43	@ 0x2b
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	f000 fa1a 	bl	800099c <send_command>
	send_data(hspi, 0x00);
 8000568:	2100      	movs	r1, #0
 800056a:	6878      	ldr	r0, [r7, #4]
 800056c:	f000 fa38 	bl	80009e0 <send_data>
	send_data(hspi, 0x00);
 8000570:	2100      	movs	r1, #0
 8000572:	6878      	ldr	r0, [r7, #4]
 8000574:	f000 fa34 	bl	80009e0 <send_data>
	send_data(hspi, 0xA0);
 8000578:	21a0      	movs	r1, #160	@ 0xa0
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f000 fa30 	bl	80009e0 <send_data>
	send_data(hspi, 0xA0);
 8000580:	21a0      	movs	r1, #160	@ 0xa0
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f000 fa2c 	bl	80009e0 <send_data>
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <display>:

void display(SPI_HandleTypeDef *hspi) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	uint16_t color = 0xF800;
 8000598:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800059c:	81fb      	strh	r3, [r7, #14]
	send_command(hspi, 0x2C); //RAMWR
 800059e:	212c      	movs	r1, #44	@ 0x2c
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f000 f9fb 	bl	800099c <send_command>

	for (int h = 0; h < height; h++) {
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
 80005aa:	e019      	b.n	80005e0 <display+0x50>
		for (int w = 0; w < width; w++) { // RGB 5-6-5
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]
 80005b0:	e010      	b.n	80005d4 <display+0x44>
			send_data(hspi, (color >> 8) & 0xFF); // RED5 GREEN3
 80005b2:	89fb      	ldrh	r3, [r7, #14]
 80005b4:	0a1b      	lsrs	r3, r3, #8
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	4619      	mov	r1, r3
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f000 fa0f 	bl	80009e0 <send_data>
			send_data(hspi, color & 0xFF); // GREEN3 BLUE5
 80005c2:	89fb      	ldrh	r3, [r7, #14]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	4619      	mov	r1, r3
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f000 fa09 	bl	80009e0 <send_data>
		for (int w = 0; w < width; w++) { // RGB 5-6-5
 80005ce:	693b      	ldr	r3, [r7, #16]
 80005d0:	3301      	adds	r3, #1
 80005d2:	613b      	str	r3, [r7, #16]
 80005d4:	693b      	ldr	r3, [r7, #16]
 80005d6:	2b83      	cmp	r3, #131	@ 0x83
 80005d8:	ddeb      	ble.n	80005b2 <display+0x22>
	for (int h = 0; h < height; h++) {
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	3301      	adds	r3, #1
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	2ba1      	cmp	r3, #161	@ 0xa1
 80005e4:	dde2      	ble.n	80005ac <display+0x1c>
		}
	}
}
 80005e6:	bf00      	nop
 80005e8:	bf00      	nop
 80005ea:	3718      	adds	r7, #24
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 fa46 	bl	8000a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f812 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f000 f8a6 	bl	800074c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000600:	f000 f86e 	bl	80006e0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  //reset_display();
  init_display(&hspi1);
 8000604:	4805      	ldr	r0, [pc, #20]	@ (800061c <main+0x2c>)
 8000606:	f000 fa0d 	bl	8000a24 <init_display>
  define_window(&hspi1);
 800060a:	4804      	ldr	r0, [pc, #16]	@ (800061c <main+0x2c>)
 800060c:	f7ff ff90 	bl	8000530 <define_window>
  display(&hspi1);
 8000610:	4802      	ldr	r0, [pc, #8]	@ (800061c <main+0x2c>)
 8000612:	f7ff ffbd 	bl	8000590 <display>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000616:	bf00      	nop
 8000618:	e7fd      	b.n	8000616 <main+0x26>
 800061a:	bf00      	nop
 800061c:	20000028 	.word	0x20000028

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	@ 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 031c 	add.w	r3, r7, #28
 800062a:	2234      	movs	r2, #52	@ 0x34
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f001 fd2a 	bl	8002088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 0308 	add.w	r3, r7, #8
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	4b23      	ldr	r3, [pc, #140]	@ (80006d8 <SystemClock_Config+0xb8>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064c:	4a22      	ldr	r2, [pc, #136]	@ (80006d8 <SystemClock_Config+0xb8>)
 800064e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000652:	6413      	str	r3, [r2, #64]	@ 0x40
 8000654:	4b20      	ldr	r3, [pc, #128]	@ (80006d8 <SystemClock_Config+0xb8>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000660:	2300      	movs	r3, #0
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	4b1d      	ldr	r3, [pc, #116]	@ (80006dc <SystemClock_Config+0xbc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800066c:	4a1b      	ldr	r2, [pc, #108]	@ (80006dc <SystemClock_Config+0xbc>)
 800066e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b19      	ldr	r3, [pc, #100]	@ (80006dc <SystemClock_Config+0xbc>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000680:	2302      	movs	r3, #2
 8000682:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000684:	2301      	movs	r3, #1
 8000686:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000688:	2310      	movs	r3, #16
 800068a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800068c:	2300      	movs	r3, #0
 800068e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	4618      	mov	r0, r3
 8000696:	f000 ffaf 	bl	80015f8 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006a0:	f000 f886 	bl	80007b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 fd0a 	bl	80010d8 <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006ca:	f000 f871 	bl	80007b0 <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3750      	adds	r7, #80	@ 0x50
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006e4:	4b17      	ldr	r3, [pc, #92]	@ (8000744 <MX_SPI1_Init+0x64>)
 80006e6:	4a18      	ldr	r2, [pc, #96]	@ (8000748 <MX_SPI1_Init+0x68>)
 80006e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ea:	4b16      	ldr	r3, [pc, #88]	@ (8000744 <MX_SPI1_Init+0x64>)
 80006ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006f2:	4b14      	ldr	r3, [pc, #80]	@ (8000744 <MX_SPI1_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006f8:	4b12      	ldr	r3, [pc, #72]	@ (8000744 <MX_SPI1_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006fe:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <MX_SPI1_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000704:	4b0f      	ldr	r3, [pc, #60]	@ (8000744 <MX_SPI1_Init+0x64>)
 8000706:	2200      	movs	r2, #0
 8000708:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800070a:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <MX_SPI1_Init+0x64>)
 800070c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000710:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000712:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <MX_SPI1_Init+0x64>)
 8000714:	2210      	movs	r2, #16
 8000716:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000718:	4b0a      	ldr	r3, [pc, #40]	@ (8000744 <MX_SPI1_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800071e:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <MX_SPI1_Init+0x64>)
 8000720:	2200      	movs	r2, #0
 8000722:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000724:	4b07      	ldr	r3, [pc, #28]	@ (8000744 <MX_SPI1_Init+0x64>)
 8000726:	2200      	movs	r2, #0
 8000728:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800072a:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <MX_SPI1_Init+0x64>)
 800072c:	220a      	movs	r2, #10
 800072e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000730:	4804      	ldr	r0, [pc, #16]	@ (8000744 <MX_SPI1_Init+0x64>)
 8000732:	f001 f9ff 	bl	8001b34 <HAL_SPI_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800073c:	f000 f838 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000028 	.word	0x20000028
 8000748:	40013000 	.word	0x40013000

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000760:	2300      	movs	r3, #0
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	4b10      	ldr	r3, [pc, #64]	@ (80007a8 <MX_GPIO_Init+0x5c>)
 8000766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000768:	4a0f      	ldr	r2, [pc, #60]	@ (80007a8 <MX_GPIO_Init+0x5c>)
 800076a:	f043 0301 	orr.w	r3, r3, #1
 800076e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000770:	4b0d      	ldr	r3, [pc, #52]	@ (80007a8 <MX_GPIO_Init+0x5c>)
 8000772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000774:	f003 0301 	and.w	r3, r3, #1
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	2107      	movs	r1, #7
 8000780:	480a      	ldr	r0, [pc, #40]	@ (80007ac <MX_GPIO_Init+0x60>)
 8000782:	f000 fc8f 	bl	80010a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000786:	2307      	movs	r3, #7
 8000788:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078a:	2301      	movs	r3, #1
 800078c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800078e:	2301      	movs	r3, #1
 8000790:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	4619      	mov	r1, r3
 800079a:	4804      	ldr	r0, [pc, #16]	@ (80007ac <MX_GPIO_Init+0x60>)
 800079c:	f000 faee 	bl	8000d7c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007a0:	bf00      	nop
 80007a2:	3718      	adds	r7, #24
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40020000 	.word	0x40020000

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
}
 80007b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <Error_Handler+0x8>

080007bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b10      	ldr	r3, [pc, #64]	@ (8000808 <HAL_MspInit+0x4c>)
 80007c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000808 <HAL_MspInit+0x4c>)
 80007cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80007d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000808 <HAL_MspInit+0x4c>)
 80007d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <HAL_MspInit+0x4c>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e6:	4a08      	ldr	r2, [pc, #32]	@ (8000808 <HAL_MspInit+0x4c>)
 80007e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ee:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <HAL_MspInit+0x4c>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800

0800080c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	@ 0x28
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a19      	ldr	r2, [pc, #100]	@ (8000890 <HAL_SPI_MspInit+0x84>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d12b      	bne.n	8000886 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	4b18      	ldr	r3, [pc, #96]	@ (8000894 <HAL_SPI_MspInit+0x88>)
 8000834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000836:	4a17      	ldr	r2, [pc, #92]	@ (8000894 <HAL_SPI_MspInit+0x88>)
 8000838:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800083c:	6453      	str	r3, [r2, #68]	@ 0x44
 800083e:	4b15      	ldr	r3, [pc, #84]	@ (8000894 <HAL_SPI_MspInit+0x88>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000842:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <HAL_SPI_MspInit+0x88>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a10      	ldr	r2, [pc, #64]	@ (8000894 <HAL_SPI_MspInit+0x88>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <HAL_SPI_MspInit+0x88>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000866:	23a0      	movs	r3, #160	@ 0xa0
 8000868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000872:	2303      	movs	r3, #3
 8000874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000876:	2305      	movs	r3, #5
 8000878:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	4805      	ldr	r0, [pc, #20]	@ (8000898 <HAL_SPI_MspInit+0x8c>)
 8000882:	f000 fa7b 	bl	8000d7c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000886:	bf00      	nop
 8000888:	3728      	adds	r7, #40	@ 0x28
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40013000 	.word	0x40013000
 8000894:	40023800 	.word	0x40023800
 8000898:	40020000 	.word	0x40020000

0800089c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <NMI_Handler+0x4>

080008a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <HardFault_Handler+0x4>

080008ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <MemManage_Handler+0x4>

080008b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <BusFault_Handler+0x4>

080008bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <UsageFault_Handler+0x4>

080008c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f2:	f000 f919 	bl	8000b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000900:	4b06      	ldr	r3, [pc, #24]	@ (800091c <SystemInit+0x20>)
 8000902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000906:	4a05      	ldr	r2, [pc, #20]	@ (800091c <SystemInit+0x20>)
 8000908:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800090c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000920:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000958 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000924:	f7ff ffea 	bl	80008fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000928:	480c      	ldr	r0, [pc, #48]	@ (800095c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800092a:	490d      	ldr	r1, [pc, #52]	@ (8000960 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800092c:	4a0d      	ldr	r2, [pc, #52]	@ (8000964 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000930:	e002      	b.n	8000938 <LoopCopyDataInit>

08000932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000936:	3304      	adds	r3, #4

08000938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800093c:	d3f9      	bcc.n	8000932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093e:	4a0a      	ldr	r2, [pc, #40]	@ (8000968 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000940:	4c0a      	ldr	r4, [pc, #40]	@ (800096c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000944:	e001      	b.n	800094a <LoopFillZerobss>

08000946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000948:	3204      	adds	r2, #4

0800094a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800094c:	d3fb      	bcc.n	8000946 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800094e:	f001 fba3 	bl	8002098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000952:	f7ff fe4d 	bl	80005f0 <main>
  bx  lr    
 8000956:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000958:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800095c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000960:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000964:	08002118 	.word	0x08002118
  ldr r2, =_sbss
 8000968:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800096c:	20000084 	.word	0x20000084

08000970 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000970:	e7fe      	b.n	8000970 <ADC_IRQHandler>
	...

08000974 <reset_display>:





void reset_display(void) {
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOx_reset, GPIO_pin_reset, 0);
 8000978:	2200      	movs	r2, #0
 800097a:	2102      	movs	r1, #2
 800097c:	4806      	ldr	r0, [pc, #24]	@ (8000998 <reset_display+0x24>)
 800097e:	f000 fb91 	bl	80010a4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000982:	200a      	movs	r0, #10
 8000984:	f000 f8f0 	bl	8000b68 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOx_reset, GPIO_pin_reset, 1);
 8000988:	2201      	movs	r2, #1
 800098a:	2102      	movs	r1, #2
 800098c:	4802      	ldr	r0, [pc, #8]	@ (8000998 <reset_display+0x24>)
 800098e:	f000 fb89 	bl	80010a4 <HAL_GPIO_WritePin>
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40020000 	.word	0x40020000

0800099c <send_command>:

void send_command(SPI_HandleTypeDef *hspi, uint8_t cmd) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOx_dc, GPIO_pin_dc, 0);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2101      	movs	r1, #1
 80009ac:	480b      	ldr	r0, [pc, #44]	@ (80009dc <send_command+0x40>)
 80009ae:	f000 fb79 	bl	80010a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOx_CS, GPIO_pin_CS, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2104      	movs	r1, #4
 80009b6:	4809      	ldr	r0, [pc, #36]	@ (80009dc <send_command+0x40>)
 80009b8:	f000 fb74 	bl	80010a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &cmd, sizeof(cmd), 100);
 80009bc:	1cf9      	adds	r1, r7, #3
 80009be:	2364      	movs	r3, #100	@ 0x64
 80009c0:	2201      	movs	r2, #1
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f001 f93f 	bl	8001c46 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOx_CS, GPIO_pin_CS, 1);
 80009c8:	2201      	movs	r2, #1
 80009ca:	2104      	movs	r1, #4
 80009cc:	4803      	ldr	r0, [pc, #12]	@ (80009dc <send_command+0x40>)
 80009ce:	f000 fb69 	bl	80010a4 <HAL_GPIO_WritePin>
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40020000 	.word	0x40020000

080009e0 <send_data>:

void send_data(SPI_HandleTypeDef *hspi, uint8_t data) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	460b      	mov	r3, r1
 80009ea:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOx_dc, GPIO_pin_dc, 1);
 80009ec:	2201      	movs	r2, #1
 80009ee:	2101      	movs	r1, #1
 80009f0:	480b      	ldr	r0, [pc, #44]	@ (8000a20 <send_data+0x40>)
 80009f2:	f000 fb57 	bl	80010a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOx_CS, GPIO_pin_CS, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2104      	movs	r1, #4
 80009fa:	4809      	ldr	r0, [pc, #36]	@ (8000a20 <send_data+0x40>)
 80009fc:	f000 fb52 	bl	80010a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &data, sizeof(data), 100);
 8000a00:	1cf9      	adds	r1, r7, #3
 8000a02:	2364      	movs	r3, #100	@ 0x64
 8000a04:	2201      	movs	r2, #1
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f001 f91d 	bl	8001c46 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOx_CS, GPIO_pin_CS, 1);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2104      	movs	r1, #4
 8000a10:	4803      	ldr	r0, [pc, #12]	@ (8000a20 <send_data+0x40>)
 8000a12:	f000 fb47 	bl	80010a4 <HAL_GPIO_WritePin>

}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40020000 	.word	0x40020000

08000a24 <init_display>:

void init_display(SPI_HandleTypeDef *hspi) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	uint8_t sleep_on = 0x11;
 8000a2c:	2311      	movs	r3, #17
 8000a2e:	73fb      	strb	r3, [r7, #15]
	uint8_t display_on = 0x29;
 8000a30:	2329      	movs	r3, #41	@ 0x29
 8000a32:	73bb      	strb	r3, [r7, #14]
	uint8_t col_mod = 0x3A;
 8000a34:	233a      	movs	r3, #58	@ 0x3a
 8000a36:	737b      	strb	r3, [r7, #13]
	reset_display();
 8000a38:	f7ff ff9c 	bl	8000974 <reset_display>
	HAL_Delay(120);
 8000a3c:	2078      	movs	r0, #120	@ 0x78
 8000a3e:	f000 f893 	bl	8000b68 <HAL_Delay>
	send_command(hspi, sleep_on); //sleep out
 8000a42:	7bfb      	ldrb	r3, [r7, #15]
 8000a44:	4619      	mov	r1, r3
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f7ff ffa8 	bl	800099c <send_command>
	HAL_Delay(120);
 8000a4c:	2078      	movs	r0, #120	@ 0x78
 8000a4e:	f000 f88b 	bl	8000b68 <HAL_Delay>
	send_command(hspi, display_on); // display on
 8000a52:	7bbb      	ldrb	r3, [r7, #14]
 8000a54:	4619      	mov	r1, r3
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f7ff ffa0 	bl	800099c <send_command>
	HAL_Delay(120);
 8000a5c:	2078      	movs	r0, #120	@ 0x78
 8000a5e:	f000 f883 	bl	8000b68 <HAL_Delay>
	send_command(hspi, col_mod); // color mod
 8000a62:	7b7b      	ldrb	r3, [r7, #13]
 8000a64:	4619      	mov	r1, r3
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f7ff ff98 	bl	800099c <send_command>
	HAL_Delay(120);
 8000a6c:	2078      	movs	r0, #120	@ 0x78
 8000a6e:	f000 f87b 	bl	8000b68 <HAL_Delay>
	send_data(hspi, 0x05); // set color mod as 5-6-5
 8000a72:	2105      	movs	r1, #5
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f7ff ffb3 	bl	80009e0 <send_data>
}
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a88:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac4 <HAL_Init+0x40>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac4 <HAL_Init+0x40>)
 8000a8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a94:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac4 <HAL_Init+0x40>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac4 <HAL_Init+0x40>)
 8000a9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa0:	4b08      	ldr	r3, [pc, #32]	@ (8000ac4 <HAL_Init+0x40>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a07      	ldr	r2, [pc, #28]	@ (8000ac4 <HAL_Init+0x40>)
 8000aa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aac:	2003      	movs	r0, #3
 8000aae:	f000 f931 	bl	8000d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ab2:	200f      	movs	r0, #15
 8000ab4:	f000 f808 	bl	8000ac8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab8:	f7ff fe80 	bl	80007bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40023c00 	.word	0x40023c00

08000ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ad0:	4b12      	ldr	r3, [pc, #72]	@ (8000b1c <HAL_InitTick+0x54>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <HAL_InitTick+0x58>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ade:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 f93b 	bl	8000d62 <HAL_SYSTICK_Config>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e00e      	b.n	8000b14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2b0f      	cmp	r3, #15
 8000afa:	d80a      	bhi.n	8000b12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000afc:	2200      	movs	r2, #0
 8000afe:	6879      	ldr	r1, [r7, #4]
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	f000 f911 	bl	8000d2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b08:	4a06      	ldr	r2, [pc, #24]	@ (8000b24 <HAL_InitTick+0x5c>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e000      	b.n	8000b14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000000 	.word	0x20000000
 8000b20:	20000008 	.word	0x20000008
 8000b24:	20000004 	.word	0x20000004

08000b28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <HAL_IncTick+0x20>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <HAL_IncTick+0x24>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4413      	add	r3, r2
 8000b38:	4a04      	ldr	r2, [pc, #16]	@ (8000b4c <HAL_IncTick+0x24>)
 8000b3a:	6013      	str	r3, [r2, #0]
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000008 	.word	0x20000008
 8000b4c:	20000080 	.word	0x20000080

08000b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return uwTick;
 8000b54:	4b03      	ldr	r3, [pc, #12]	@ (8000b64 <HAL_GetTick+0x14>)
 8000b56:	681b      	ldr	r3, [r3, #0]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	20000080 	.word	0x20000080

08000b68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b70:	f7ff ffee 	bl	8000b50 <HAL_GetTick>
 8000b74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b80:	d005      	beq.n	8000b8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b82:	4b0a      	ldr	r3, [pc, #40]	@ (8000bac <HAL_Delay+0x44>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	461a      	mov	r2, r3
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b8e:	bf00      	nop
 8000b90:	f7ff ffde 	bl	8000b50 <HAL_GetTick>
 8000b94:	4602      	mov	r2, r0
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d8f7      	bhi.n	8000b90 <HAL_Delay+0x28>
  {
  }
}
 8000ba0:	bf00      	nop
 8000ba2:	bf00      	nop
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000008 	.word	0x20000008

08000bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be2:	4a04      	ldr	r2, [pc, #16]	@ (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	60d3      	str	r3, [r2, #12]
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bfc:	4b04      	ldr	r3, [pc, #16]	@ (8000c10 <__NVIC_GetPriorityGrouping+0x18>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	0a1b      	lsrs	r3, r3, #8
 8000c02:	f003 0307 	and.w	r3, r3, #7
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	6039      	str	r1, [r7, #0]
 8000c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	db0a      	blt.n	8000c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	490c      	ldr	r1, [pc, #48]	@ (8000c60 <__NVIC_SetPriority+0x4c>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	0112      	lsls	r2, r2, #4
 8000c34:	b2d2      	uxtb	r2, r2
 8000c36:	440b      	add	r3, r1
 8000c38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c3c:	e00a      	b.n	8000c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4908      	ldr	r1, [pc, #32]	@ (8000c64 <__NVIC_SetPriority+0x50>)
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	f003 030f 	and.w	r3, r3, #15
 8000c4a:	3b04      	subs	r3, #4
 8000c4c:	0112      	lsls	r2, r2, #4
 8000c4e:	b2d2      	uxtb	r2, r2
 8000c50:	440b      	add	r3, r1
 8000c52:	761a      	strb	r2, [r3, #24]
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000e100 	.word	0xe000e100
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b089      	sub	sp, #36	@ 0x24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	f1c3 0307 	rsb	r3, r3, #7
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	bf28      	it	cs
 8000c86:	2304      	movcs	r3, #4
 8000c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	2b06      	cmp	r3, #6
 8000c90:	d902      	bls.n	8000c98 <NVIC_EncodePriority+0x30>
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3b03      	subs	r3, #3
 8000c96:	e000      	b.n	8000c9a <NVIC_EncodePriority+0x32>
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43da      	mvns	r2, r3
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	401a      	ands	r2, r3
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cba:	43d9      	mvns	r1, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc0:	4313      	orrs	r3, r2
         );
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3724      	adds	r7, #36	@ 0x24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ce0:	d301      	bcc.n	8000ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e00f      	b.n	8000d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d10 <SysTick_Config+0x40>)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cee:	210f      	movs	r1, #15
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf4:	f7ff ff8e 	bl	8000c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf8:	4b05      	ldr	r3, [pc, #20]	@ (8000d10 <SysTick_Config+0x40>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cfe:	4b04      	ldr	r3, [pc, #16]	@ (8000d10 <SysTick_Config+0x40>)
 8000d00:	2207      	movs	r2, #7
 8000d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	e000e010 	.word	0xe000e010

08000d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff ff47 	bl	8000bb0 <__NVIC_SetPriorityGrouping>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b086      	sub	sp, #24
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	4603      	mov	r3, r0
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	607a      	str	r2, [r7, #4]
 8000d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d3c:	f7ff ff5c 	bl	8000bf8 <__NVIC_GetPriorityGrouping>
 8000d40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	68b9      	ldr	r1, [r7, #8]
 8000d46:	6978      	ldr	r0, [r7, #20]
 8000d48:	f7ff ff8e 	bl	8000c68 <NVIC_EncodePriority>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d52:	4611      	mov	r1, r2
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff5d 	bl	8000c14 <__NVIC_SetPriority>
}
 8000d5a:	bf00      	nop
 8000d5c:	3718      	adds	r7, #24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff ffb0 	bl	8000cd0 <SysTick_Config>
 8000d70:	4603      	mov	r3, r0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b089      	sub	sp, #36	@ 0x24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
 8000d96:	e165      	b.n	8001064 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d98:	2201      	movs	r2, #1
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	697a      	ldr	r2, [r7, #20]
 8000da8:	4013      	ands	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	f040 8154 	bne.w	800105e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 0303 	and.w	r3, r3, #3
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d005      	beq.n	8000dce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d130      	bne.n	8000e30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	2203      	movs	r2, #3
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4013      	ands	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	68da      	ldr	r2, [r3, #12]
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e04:	2201      	movs	r2, #1
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	091b      	lsrs	r3, r3, #4
 8000e1a:	f003 0201 	and.w	r2, r3, #1
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	2b03      	cmp	r3, #3
 8000e3a:	d017      	beq.n	8000e6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	2203      	movs	r2, #3
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	689a      	ldr	r2, [r3, #8]
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d123      	bne.n	8000ec0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	08da      	lsrs	r2, r3, #3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3208      	adds	r2, #8
 8000e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	f003 0307 	and.w	r3, r3, #7
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	220f      	movs	r2, #15
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	691a      	ldr	r2, [r3, #16]
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	08da      	lsrs	r2, r3, #3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3208      	adds	r2, #8
 8000eba:	69b9      	ldr	r1, [r7, #24]
 8000ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	2203      	movs	r2, #3
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0203 	and.w	r2, r3, #3
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f000 80ae 	beq.w	800105e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	4b5d      	ldr	r3, [pc, #372]	@ (800107c <HAL_GPIO_Init+0x300>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0a:	4a5c      	ldr	r2, [pc, #368]	@ (800107c <HAL_GPIO_Init+0x300>)
 8000f0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f12:	4b5a      	ldr	r3, [pc, #360]	@ (800107c <HAL_GPIO_Init+0x300>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f1e:	4a58      	ldr	r2, [pc, #352]	@ (8001080 <HAL_GPIO_Init+0x304>)
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	089b      	lsrs	r3, r3, #2
 8000f24:	3302      	adds	r3, #2
 8000f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	220f      	movs	r2, #15
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a4f      	ldr	r2, [pc, #316]	@ (8001084 <HAL_GPIO_Init+0x308>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d025      	beq.n	8000f96 <HAL_GPIO_Init+0x21a>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a4e      	ldr	r2, [pc, #312]	@ (8001088 <HAL_GPIO_Init+0x30c>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d01f      	beq.n	8000f92 <HAL_GPIO_Init+0x216>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a4d      	ldr	r2, [pc, #308]	@ (800108c <HAL_GPIO_Init+0x310>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d019      	beq.n	8000f8e <HAL_GPIO_Init+0x212>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4c      	ldr	r2, [pc, #304]	@ (8001090 <HAL_GPIO_Init+0x314>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d013      	beq.n	8000f8a <HAL_GPIO_Init+0x20e>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4b      	ldr	r2, [pc, #300]	@ (8001094 <HAL_GPIO_Init+0x318>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d00d      	beq.n	8000f86 <HAL_GPIO_Init+0x20a>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a4a      	ldr	r2, [pc, #296]	@ (8001098 <HAL_GPIO_Init+0x31c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d007      	beq.n	8000f82 <HAL_GPIO_Init+0x206>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a49      	ldr	r2, [pc, #292]	@ (800109c <HAL_GPIO_Init+0x320>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d101      	bne.n	8000f7e <HAL_GPIO_Init+0x202>
 8000f7a:	2306      	movs	r3, #6
 8000f7c:	e00c      	b.n	8000f98 <HAL_GPIO_Init+0x21c>
 8000f7e:	2307      	movs	r3, #7
 8000f80:	e00a      	b.n	8000f98 <HAL_GPIO_Init+0x21c>
 8000f82:	2305      	movs	r3, #5
 8000f84:	e008      	b.n	8000f98 <HAL_GPIO_Init+0x21c>
 8000f86:	2304      	movs	r3, #4
 8000f88:	e006      	b.n	8000f98 <HAL_GPIO_Init+0x21c>
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e004      	b.n	8000f98 <HAL_GPIO_Init+0x21c>
 8000f8e:	2302      	movs	r3, #2
 8000f90:	e002      	b.n	8000f98 <HAL_GPIO_Init+0x21c>
 8000f92:	2301      	movs	r3, #1
 8000f94:	e000      	b.n	8000f98 <HAL_GPIO_Init+0x21c>
 8000f96:	2300      	movs	r3, #0
 8000f98:	69fa      	ldr	r2, [r7, #28]
 8000f9a:	f002 0203 	and.w	r2, r2, #3
 8000f9e:	0092      	lsls	r2, r2, #2
 8000fa0:	4093      	lsls	r3, r2
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fa8:	4935      	ldr	r1, [pc, #212]	@ (8001080 <HAL_GPIO_Init+0x304>)
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	089b      	lsrs	r3, r3, #2
 8000fae:	3302      	adds	r3, #2
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fb6:	4b3a      	ldr	r3, [pc, #232]	@ (80010a0 <HAL_GPIO_Init+0x324>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fda:	4a31      	ldr	r2, [pc, #196]	@ (80010a0 <HAL_GPIO_Init+0x324>)
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fe0:	4b2f      	ldr	r3, [pc, #188]	@ (80010a0 <HAL_GPIO_Init+0x324>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001004:	4a26      	ldr	r2, [pc, #152]	@ (80010a0 <HAL_GPIO_Init+0x324>)
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800100a:	4b25      	ldr	r3, [pc, #148]	@ (80010a0 <HAL_GPIO_Init+0x324>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	43db      	mvns	r3, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4013      	ands	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800102e:	4a1c      	ldr	r2, [pc, #112]	@ (80010a0 <HAL_GPIO_Init+0x324>)
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001034:	4b1a      	ldr	r3, [pc, #104]	@ (80010a0 <HAL_GPIO_Init+0x324>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d003      	beq.n	8001058 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001058:	4a11      	ldr	r2, [pc, #68]	@ (80010a0 <HAL_GPIO_Init+0x324>)
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3301      	adds	r3, #1
 8001062:	61fb      	str	r3, [r7, #28]
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	2b0f      	cmp	r3, #15
 8001068:	f67f ae96 	bls.w	8000d98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	3724      	adds	r7, #36	@ 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800
 8001080:	40013800 	.word	0x40013800
 8001084:	40020000 	.word	0x40020000
 8001088:	40020400 	.word	0x40020400
 800108c:	40020800 	.word	0x40020800
 8001090:	40020c00 	.word	0x40020c00
 8001094:	40021000 	.word	0x40021000
 8001098:	40021400 	.word	0x40021400
 800109c:	40021800 	.word	0x40021800
 80010a0:	40013c00 	.word	0x40013c00

080010a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	807b      	strh	r3, [r7, #2]
 80010b0:	4613      	mov	r3, r2
 80010b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010b4:	787b      	ldrb	r3, [r7, #1]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ba:	887a      	ldrh	r2, [r7, #2]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010c0:	e003      	b.n	80010ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010c2:	887b      	ldrh	r3, [r7, #2]
 80010c4:	041a      	lsls	r2, r3, #16
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	619a      	str	r2, [r3, #24]
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
	...

080010d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e0cc      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010ec:	4b68      	ldr	r3, [pc, #416]	@ (8001290 <HAL_RCC_ClockConfig+0x1b8>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 030f 	and.w	r3, r3, #15
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d90c      	bls.n	8001114 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010fa:	4b65      	ldr	r3, [pc, #404]	@ (8001290 <HAL_RCC_ClockConfig+0x1b8>)
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001102:	4b63      	ldr	r3, [pc, #396]	@ (8001290 <HAL_RCC_ClockConfig+0x1b8>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 030f 	and.w	r3, r3, #15
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	429a      	cmp	r2, r3
 800110e:	d001      	beq.n	8001114 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e0b8      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d020      	beq.n	8001162 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0304 	and.w	r3, r3, #4
 8001128:	2b00      	cmp	r3, #0
 800112a:	d005      	beq.n	8001138 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800112c:	4b59      	ldr	r3, [pc, #356]	@ (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	4a58      	ldr	r2, [pc, #352]	@ (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001132:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001136:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0308 	and.w	r3, r3, #8
 8001140:	2b00      	cmp	r3, #0
 8001142:	d005      	beq.n	8001150 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001144:	4b53      	ldr	r3, [pc, #332]	@ (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	4a52      	ldr	r2, [pc, #328]	@ (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800114a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800114e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001150:	4b50      	ldr	r3, [pc, #320]	@ (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	494d      	ldr	r1, [pc, #308]	@ (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800115e:	4313      	orrs	r3, r2
 8001160:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	2b00      	cmp	r3, #0
 800116c:	d044      	beq.n	80011f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d107      	bne.n	8001186 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001176:	4b47      	ldr	r3, [pc, #284]	@ (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d119      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e07f      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2b02      	cmp	r3, #2
 800118c:	d003      	beq.n	8001196 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001192:	2b03      	cmp	r3, #3
 8001194:	d107      	bne.n	80011a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001196:	4b3f      	ldr	r3, [pc, #252]	@ (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d109      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e06f      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e067      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011b6:	4b37      	ldr	r3, [pc, #220]	@ (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f023 0203 	bic.w	r2, r3, #3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	4934      	ldr	r1, [pc, #208]	@ (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 80011c4:	4313      	orrs	r3, r2
 80011c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011c8:	f7ff fcc2 	bl	8000b50 <HAL_GetTick>
 80011cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ce:	e00a      	b.n	80011e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011d0:	f7ff fcbe 	bl	8000b50 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011de:	4293      	cmp	r3, r2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e04f      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f003 020c 	and.w	r2, r3, #12
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d1eb      	bne.n	80011d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011f8:	4b25      	ldr	r3, [pc, #148]	@ (8001290 <HAL_RCC_ClockConfig+0x1b8>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 030f 	and.w	r3, r3, #15
 8001200:	683a      	ldr	r2, [r7, #0]
 8001202:	429a      	cmp	r2, r3
 8001204:	d20c      	bcs.n	8001220 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001206:	4b22      	ldr	r3, [pc, #136]	@ (8001290 <HAL_RCC_ClockConfig+0x1b8>)
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800120e:	4b20      	ldr	r3, [pc, #128]	@ (8001290 <HAL_RCC_ClockConfig+0x1b8>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	429a      	cmp	r2, r3
 800121a:	d001      	beq.n	8001220 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e032      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	2b00      	cmp	r3, #0
 800122a:	d008      	beq.n	800123e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800122c:	4b19      	ldr	r3, [pc, #100]	@ (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	4916      	ldr	r1, [pc, #88]	@ (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800123a:	4313      	orrs	r3, r2
 800123c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0308 	and.w	r3, r3, #8
 8001246:	2b00      	cmp	r3, #0
 8001248:	d009      	beq.n	800125e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800124a:	4b12      	ldr	r3, [pc, #72]	@ (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	490e      	ldr	r1, [pc, #56]	@ (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800125a:	4313      	orrs	r3, r2
 800125c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800125e:	f000 f821 	bl	80012a4 <HAL_RCC_GetSysClockFreq>
 8001262:	4602      	mov	r2, r0
 8001264:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	091b      	lsrs	r3, r3, #4
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	490a      	ldr	r1, [pc, #40]	@ (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 8001270:	5ccb      	ldrb	r3, [r1, r3]
 8001272:	fa22 f303 	lsr.w	r3, r2, r3
 8001276:	4a09      	ldr	r2, [pc, #36]	@ (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800127a:	4b09      	ldr	r3, [pc, #36]	@ (80012a0 <HAL_RCC_ClockConfig+0x1c8>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fc22 	bl	8000ac8 <HAL_InitTick>

  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023c00 	.word	0x40023c00
 8001294:	40023800 	.word	0x40023800
 8001298:	080020f8 	.word	0x080020f8
 800129c:	20000000 	.word	0x20000000
 80012a0:	20000004 	.word	0x20000004

080012a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012a8:	b0a6      	sub	sp, #152	@ 0x98
 80012aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80012be:	2300      	movs	r3, #0
 80012c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012ca:	4bc8      	ldr	r3, [pc, #800]	@ (80015ec <HAL_RCC_GetSysClockFreq+0x348>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 030c 	and.w	r3, r3, #12
 80012d2:	2b0c      	cmp	r3, #12
 80012d4:	f200 817e 	bhi.w	80015d4 <HAL_RCC_GetSysClockFreq+0x330>
 80012d8:	a201      	add	r2, pc, #4	@ (adr r2, 80012e0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80012da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012de:	bf00      	nop
 80012e0:	08001315 	.word	0x08001315
 80012e4:	080015d5 	.word	0x080015d5
 80012e8:	080015d5 	.word	0x080015d5
 80012ec:	080015d5 	.word	0x080015d5
 80012f0:	0800131d 	.word	0x0800131d
 80012f4:	080015d5 	.word	0x080015d5
 80012f8:	080015d5 	.word	0x080015d5
 80012fc:	080015d5 	.word	0x080015d5
 8001300:	08001325 	.word	0x08001325
 8001304:	080015d5 	.word	0x080015d5
 8001308:	080015d5 	.word	0x080015d5
 800130c:	080015d5 	.word	0x080015d5
 8001310:	0800148f 	.word	0x0800148f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001314:	4bb6      	ldr	r3, [pc, #728]	@ (80015f0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001316:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800131a:	e15f      	b.n	80015dc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800131c:	4bb5      	ldr	r3, [pc, #724]	@ (80015f4 <HAL_RCC_GetSysClockFreq+0x350>)
 800131e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001322:	e15b      	b.n	80015dc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001324:	4bb1      	ldr	r3, [pc, #708]	@ (80015ec <HAL_RCC_GetSysClockFreq+0x348>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800132c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001330:	4bae      	ldr	r3, [pc, #696]	@ (80015ec <HAL_RCC_GetSysClockFreq+0x348>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d031      	beq.n	80013a0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800133c:	4bab      	ldr	r3, [pc, #684]	@ (80015ec <HAL_RCC_GetSysClockFreq+0x348>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	099b      	lsrs	r3, r3, #6
 8001342:	2200      	movs	r2, #0
 8001344:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001346:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001348:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800134a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800134e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001350:	2300      	movs	r3, #0
 8001352:	667b      	str	r3, [r7, #100]	@ 0x64
 8001354:	4ba7      	ldr	r3, [pc, #668]	@ (80015f4 <HAL_RCC_GetSysClockFreq+0x350>)
 8001356:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800135a:	462a      	mov	r2, r5
 800135c:	fb03 f202 	mul.w	r2, r3, r2
 8001360:	2300      	movs	r3, #0
 8001362:	4621      	mov	r1, r4
 8001364:	fb01 f303 	mul.w	r3, r1, r3
 8001368:	4413      	add	r3, r2
 800136a:	4aa2      	ldr	r2, [pc, #648]	@ (80015f4 <HAL_RCC_GetSysClockFreq+0x350>)
 800136c:	4621      	mov	r1, r4
 800136e:	fba1 1202 	umull	r1, r2, r1, r2
 8001372:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001374:	460a      	mov	r2, r1
 8001376:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001378:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800137a:	4413      	add	r3, r2
 800137c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800137e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001382:	2200      	movs	r2, #0
 8001384:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001386:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001388:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800138c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001390:	f7fe ff38 	bl	8000204 <__aeabi_uldivmod>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4613      	mov	r3, r2
 800139a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800139e:	e064      	b.n	800146a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013a0:	4b92      	ldr	r3, [pc, #584]	@ (80015ec <HAL_RCC_GetSysClockFreq+0x348>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	099b      	lsrs	r3, r3, #6
 80013a6:	2200      	movs	r2, #0
 80013a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80013aa:	657a      	str	r2, [r7, #84]	@ 0x54
 80013ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80013ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80013b4:	2300      	movs	r3, #0
 80013b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80013b8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80013bc:	4622      	mov	r2, r4
 80013be:	462b      	mov	r3, r5
 80013c0:	f04f 0000 	mov.w	r0, #0
 80013c4:	f04f 0100 	mov.w	r1, #0
 80013c8:	0159      	lsls	r1, r3, #5
 80013ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013ce:	0150      	lsls	r0, r2, #5
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	4621      	mov	r1, r4
 80013d6:	1a51      	subs	r1, r2, r1
 80013d8:	6139      	str	r1, [r7, #16]
 80013da:	4629      	mov	r1, r5
 80013dc:	eb63 0301 	sbc.w	r3, r3, r1
 80013e0:	617b      	str	r3, [r7, #20]
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	f04f 0300 	mov.w	r3, #0
 80013ea:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80013ee:	4659      	mov	r1, fp
 80013f0:	018b      	lsls	r3, r1, #6
 80013f2:	4651      	mov	r1, sl
 80013f4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80013f8:	4651      	mov	r1, sl
 80013fa:	018a      	lsls	r2, r1, #6
 80013fc:	4651      	mov	r1, sl
 80013fe:	ebb2 0801 	subs.w	r8, r2, r1
 8001402:	4659      	mov	r1, fp
 8001404:	eb63 0901 	sbc.w	r9, r3, r1
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	f04f 0300 	mov.w	r3, #0
 8001410:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001414:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001418:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800141c:	4690      	mov	r8, r2
 800141e:	4699      	mov	r9, r3
 8001420:	4623      	mov	r3, r4
 8001422:	eb18 0303 	adds.w	r3, r8, r3
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	462b      	mov	r3, r5
 800142a:	eb49 0303 	adc.w	r3, r9, r3
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800143c:	4629      	mov	r1, r5
 800143e:	028b      	lsls	r3, r1, #10
 8001440:	4621      	mov	r1, r4
 8001442:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001446:	4621      	mov	r1, r4
 8001448:	028a      	lsls	r2, r1, #10
 800144a:	4610      	mov	r0, r2
 800144c:	4619      	mov	r1, r3
 800144e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001452:	2200      	movs	r2, #0
 8001454:	643b      	str	r3, [r7, #64]	@ 0x40
 8001456:	647a      	str	r2, [r7, #68]	@ 0x44
 8001458:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800145c:	f7fe fed2 	bl	8000204 <__aeabi_uldivmod>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4613      	mov	r3, r2
 8001466:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800146a:	4b60      	ldr	r3, [pc, #384]	@ (80015ec <HAL_RCC_GetSysClockFreq+0x348>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	0c1b      	lsrs	r3, r3, #16
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	3301      	adds	r3, #1
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 800147c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001480:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001484:	fbb2 f3f3 	udiv	r3, r2, r3
 8001488:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800148c:	e0a6      	b.n	80015dc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800148e:	4b57      	ldr	r3, [pc, #348]	@ (80015ec <HAL_RCC_GetSysClockFreq+0x348>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001496:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800149a:	4b54      	ldr	r3, [pc, #336]	@ (80015ec <HAL_RCC_GetSysClockFreq+0x348>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d02a      	beq.n	80014fc <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014a6:	4b51      	ldr	r3, [pc, #324]	@ (80015ec <HAL_RCC_GetSysClockFreq+0x348>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	099b      	lsrs	r3, r3, #6
 80014ac:	2200      	movs	r2, #0
 80014ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80014b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80014b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80014b8:	2100      	movs	r1, #0
 80014ba:	4b4e      	ldr	r3, [pc, #312]	@ (80015f4 <HAL_RCC_GetSysClockFreq+0x350>)
 80014bc:	fb03 f201 	mul.w	r2, r3, r1
 80014c0:	2300      	movs	r3, #0
 80014c2:	fb00 f303 	mul.w	r3, r0, r3
 80014c6:	4413      	add	r3, r2
 80014c8:	4a4a      	ldr	r2, [pc, #296]	@ (80015f4 <HAL_RCC_GetSysClockFreq+0x350>)
 80014ca:	fba0 1202 	umull	r1, r2, r0, r2
 80014ce:	677a      	str	r2, [r7, #116]	@ 0x74
 80014d0:	460a      	mov	r2, r1
 80014d2:	673a      	str	r2, [r7, #112]	@ 0x70
 80014d4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80014d6:	4413      	add	r3, r2
 80014d8:	677b      	str	r3, [r7, #116]	@ 0x74
 80014da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80014de:	2200      	movs	r2, #0
 80014e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80014e2:	637a      	str	r2, [r7, #52]	@ 0x34
 80014e4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80014e8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80014ec:	f7fe fe8a 	bl	8000204 <__aeabi_uldivmod>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4613      	mov	r3, r2
 80014f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80014fa:	e05b      	b.n	80015b4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014fc:	4b3b      	ldr	r3, [pc, #236]	@ (80015ec <HAL_RCC_GetSysClockFreq+0x348>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	099b      	lsrs	r3, r3, #6
 8001502:	2200      	movs	r2, #0
 8001504:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001506:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800150a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800150e:	623b      	str	r3, [r7, #32]
 8001510:	2300      	movs	r3, #0
 8001512:	627b      	str	r3, [r7, #36]	@ 0x24
 8001514:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001518:	4642      	mov	r2, r8
 800151a:	464b      	mov	r3, r9
 800151c:	f04f 0000 	mov.w	r0, #0
 8001520:	f04f 0100 	mov.w	r1, #0
 8001524:	0159      	lsls	r1, r3, #5
 8001526:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800152a:	0150      	lsls	r0, r2, #5
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4641      	mov	r1, r8
 8001532:	ebb2 0a01 	subs.w	sl, r2, r1
 8001536:	4649      	mov	r1, r9
 8001538:	eb63 0b01 	sbc.w	fp, r3, r1
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	f04f 0300 	mov.w	r3, #0
 8001544:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001548:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800154c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001550:	ebb2 040a 	subs.w	r4, r2, sl
 8001554:	eb63 050b 	sbc.w	r5, r3, fp
 8001558:	f04f 0200 	mov.w	r2, #0
 800155c:	f04f 0300 	mov.w	r3, #0
 8001560:	00eb      	lsls	r3, r5, #3
 8001562:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001566:	00e2      	lsls	r2, r4, #3
 8001568:	4614      	mov	r4, r2
 800156a:	461d      	mov	r5, r3
 800156c:	4643      	mov	r3, r8
 800156e:	18e3      	adds	r3, r4, r3
 8001570:	603b      	str	r3, [r7, #0]
 8001572:	464b      	mov	r3, r9
 8001574:	eb45 0303 	adc.w	r3, r5, r3
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	f04f 0200 	mov.w	r2, #0
 800157e:	f04f 0300 	mov.w	r3, #0
 8001582:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001586:	4629      	mov	r1, r5
 8001588:	028b      	lsls	r3, r1, #10
 800158a:	4621      	mov	r1, r4
 800158c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001590:	4621      	mov	r1, r4
 8001592:	028a      	lsls	r2, r1, #10
 8001594:	4610      	mov	r0, r2
 8001596:	4619      	mov	r1, r3
 8001598:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800159c:	2200      	movs	r2, #0
 800159e:	61bb      	str	r3, [r7, #24]
 80015a0:	61fa      	str	r2, [r7, #28]
 80015a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015a6:	f7fe fe2d 	bl	8000204 <__aeabi_uldivmod>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4613      	mov	r3, r2
 80015b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80015b4:	4b0d      	ldr	r3, [pc, #52]	@ (80015ec <HAL_RCC_GetSysClockFreq+0x348>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	0f1b      	lsrs	r3, r3, #28
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80015c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80015c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80015ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80015d2:	e003      	b.n	80015dc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80015d4:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80015d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80015da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3798      	adds	r7, #152	@ 0x98
 80015e4:	46bd      	mov	sp, r7
 80015e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015ea:	bf00      	nop
 80015ec:	40023800 	.word	0x40023800
 80015f0:	00f42400 	.word	0x00f42400
 80015f4:	017d7840 	.word	0x017d7840

080015f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e28d      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 8083 	beq.w	800171e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001618:	4b94      	ldr	r3, [pc, #592]	@ (800186c <HAL_RCC_OscConfig+0x274>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 030c 	and.w	r3, r3, #12
 8001620:	2b04      	cmp	r3, #4
 8001622:	d019      	beq.n	8001658 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001624:	4b91      	ldr	r3, [pc, #580]	@ (800186c <HAL_RCC_OscConfig+0x274>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 030c 	and.w	r3, r3, #12
        || \
 800162c:	2b08      	cmp	r3, #8
 800162e:	d106      	bne.n	800163e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001630:	4b8e      	ldr	r3, [pc, #568]	@ (800186c <HAL_RCC_OscConfig+0x274>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001638:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800163c:	d00c      	beq.n	8001658 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800163e:	4b8b      	ldr	r3, [pc, #556]	@ (800186c <HAL_RCC_OscConfig+0x274>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001646:	2b0c      	cmp	r3, #12
 8001648:	d112      	bne.n	8001670 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800164a:	4b88      	ldr	r3, [pc, #544]	@ (800186c <HAL_RCC_OscConfig+0x274>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001652:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001656:	d10b      	bne.n	8001670 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001658:	4b84      	ldr	r3, [pc, #528]	@ (800186c <HAL_RCC_OscConfig+0x274>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d05b      	beq.n	800171c <HAL_RCC_OscConfig+0x124>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d157      	bne.n	800171c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e25a      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001678:	d106      	bne.n	8001688 <HAL_RCC_OscConfig+0x90>
 800167a:	4b7c      	ldr	r3, [pc, #496]	@ (800186c <HAL_RCC_OscConfig+0x274>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a7b      	ldr	r2, [pc, #492]	@ (800186c <HAL_RCC_OscConfig+0x274>)
 8001680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	e01d      	b.n	80016c4 <HAL_RCC_OscConfig+0xcc>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001690:	d10c      	bne.n	80016ac <HAL_RCC_OscConfig+0xb4>
 8001692:	4b76      	ldr	r3, [pc, #472]	@ (800186c <HAL_RCC_OscConfig+0x274>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a75      	ldr	r2, [pc, #468]	@ (800186c <HAL_RCC_OscConfig+0x274>)
 8001698:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	4b73      	ldr	r3, [pc, #460]	@ (800186c <HAL_RCC_OscConfig+0x274>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a72      	ldr	r2, [pc, #456]	@ (800186c <HAL_RCC_OscConfig+0x274>)
 80016a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	e00b      	b.n	80016c4 <HAL_RCC_OscConfig+0xcc>
 80016ac:	4b6f      	ldr	r3, [pc, #444]	@ (800186c <HAL_RCC_OscConfig+0x274>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a6e      	ldr	r2, [pc, #440]	@ (800186c <HAL_RCC_OscConfig+0x274>)
 80016b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	4b6c      	ldr	r3, [pc, #432]	@ (800186c <HAL_RCC_OscConfig+0x274>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a6b      	ldr	r2, [pc, #428]	@ (800186c <HAL_RCC_OscConfig+0x274>)
 80016be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d013      	beq.n	80016f4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016cc:	f7ff fa40 	bl	8000b50 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d4:	f7ff fa3c 	bl	8000b50 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b64      	cmp	r3, #100	@ 0x64
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e21f      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e6:	4b61      	ldr	r3, [pc, #388]	@ (800186c <HAL_RCC_OscConfig+0x274>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0xdc>
 80016f2:	e014      	b.n	800171e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f4:	f7ff fa2c 	bl	8000b50 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016fc:	f7ff fa28 	bl	8000b50 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b64      	cmp	r3, #100	@ 0x64
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e20b      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800170e:	4b57      	ldr	r3, [pc, #348]	@ (800186c <HAL_RCC_OscConfig+0x274>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x104>
 800171a:	e000      	b.n	800171e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800171c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d06f      	beq.n	800180a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800172a:	4b50      	ldr	r3, [pc, #320]	@ (800186c <HAL_RCC_OscConfig+0x274>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	2b00      	cmp	r3, #0
 8001734:	d017      	beq.n	8001766 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001736:	4b4d      	ldr	r3, [pc, #308]	@ (800186c <HAL_RCC_OscConfig+0x274>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 030c 	and.w	r3, r3, #12
        || \
 800173e:	2b08      	cmp	r3, #8
 8001740:	d105      	bne.n	800174e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001742:	4b4a      	ldr	r3, [pc, #296]	@ (800186c <HAL_RCC_OscConfig+0x274>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00b      	beq.n	8001766 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800174e:	4b47      	ldr	r3, [pc, #284]	@ (800186c <HAL_RCC_OscConfig+0x274>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001756:	2b0c      	cmp	r3, #12
 8001758:	d11c      	bne.n	8001794 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800175a:	4b44      	ldr	r3, [pc, #272]	@ (800186c <HAL_RCC_OscConfig+0x274>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d116      	bne.n	8001794 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001766:	4b41      	ldr	r3, [pc, #260]	@ (800186c <HAL_RCC_OscConfig+0x274>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d005      	beq.n	800177e <HAL_RCC_OscConfig+0x186>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d001      	beq.n	800177e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e1d3      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177e:	4b3b      	ldr	r3, [pc, #236]	@ (800186c <HAL_RCC_OscConfig+0x274>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	4937      	ldr	r1, [pc, #220]	@ (800186c <HAL_RCC_OscConfig+0x274>)
 800178e:	4313      	orrs	r3, r2
 8001790:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001792:	e03a      	b.n	800180a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d020      	beq.n	80017de <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800179c:	4b34      	ldr	r3, [pc, #208]	@ (8001870 <HAL_RCC_OscConfig+0x278>)
 800179e:	2201      	movs	r2, #1
 80017a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a2:	f7ff f9d5 	bl	8000b50 <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017aa:	f7ff f9d1 	bl	8000b50 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e1b4      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017bc:	4b2b      	ldr	r3, [pc, #172]	@ (800186c <HAL_RCC_OscConfig+0x274>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0f0      	beq.n	80017aa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c8:	4b28      	ldr	r3, [pc, #160]	@ (800186c <HAL_RCC_OscConfig+0x274>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	4925      	ldr	r1, [pc, #148]	@ (800186c <HAL_RCC_OscConfig+0x274>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	600b      	str	r3, [r1, #0]
 80017dc:	e015      	b.n	800180a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017de:	4b24      	ldr	r3, [pc, #144]	@ (8001870 <HAL_RCC_OscConfig+0x278>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e4:	f7ff f9b4 	bl	8000b50 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ec:	f7ff f9b0 	bl	8000b50 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e193      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017fe:	4b1b      	ldr	r3, [pc, #108]	@ (800186c <HAL_RCC_OscConfig+0x274>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0308 	and.w	r3, r3, #8
 8001812:	2b00      	cmp	r3, #0
 8001814:	d036      	beq.n	8001884 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d016      	beq.n	800184c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800181e:	4b15      	ldr	r3, [pc, #84]	@ (8001874 <HAL_RCC_OscConfig+0x27c>)
 8001820:	2201      	movs	r2, #1
 8001822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001824:	f7ff f994 	bl	8000b50 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800182c:	f7ff f990 	bl	8000b50 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e173      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800183e:	4b0b      	ldr	r3, [pc, #44]	@ (800186c <HAL_RCC_OscConfig+0x274>)
 8001840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d0f0      	beq.n	800182c <HAL_RCC_OscConfig+0x234>
 800184a:	e01b      	b.n	8001884 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800184c:	4b09      	ldr	r3, [pc, #36]	@ (8001874 <HAL_RCC_OscConfig+0x27c>)
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001852:	f7ff f97d 	bl	8000b50 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001858:	e00e      	b.n	8001878 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800185a:	f7ff f979 	bl	8000b50 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d907      	bls.n	8001878 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e15c      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
 800186c:	40023800 	.word	0x40023800
 8001870:	42470000 	.word	0x42470000
 8001874:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001878:	4b8a      	ldr	r3, [pc, #552]	@ (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 800187a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1ea      	bne.n	800185a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 8097 	beq.w	80019c0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001892:	2300      	movs	r3, #0
 8001894:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001896:	4b83      	ldr	r3, [pc, #524]	@ (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10f      	bne.n	80018c2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	4b7f      	ldr	r3, [pc, #508]	@ (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018aa:	4a7e      	ldr	r2, [pc, #504]	@ (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 80018ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018b2:	4b7c      	ldr	r3, [pc, #496]	@ (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018be:	2301      	movs	r3, #1
 80018c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c2:	4b79      	ldr	r3, [pc, #484]	@ (8001aa8 <HAL_RCC_OscConfig+0x4b0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d118      	bne.n	8001900 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ce:	4b76      	ldr	r3, [pc, #472]	@ (8001aa8 <HAL_RCC_OscConfig+0x4b0>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a75      	ldr	r2, [pc, #468]	@ (8001aa8 <HAL_RCC_OscConfig+0x4b0>)
 80018d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018da:	f7ff f939 	bl	8000b50 <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018e2:	f7ff f935 	bl	8000b50 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e118      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f4:	4b6c      	ldr	r3, [pc, #432]	@ (8001aa8 <HAL_RCC_OscConfig+0x4b0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0f0      	beq.n	80018e2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d106      	bne.n	8001916 <HAL_RCC_OscConfig+0x31e>
 8001908:	4b66      	ldr	r3, [pc, #408]	@ (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 800190a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800190c:	4a65      	ldr	r2, [pc, #404]	@ (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	6713      	str	r3, [r2, #112]	@ 0x70
 8001914:	e01c      	b.n	8001950 <HAL_RCC_OscConfig+0x358>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	2b05      	cmp	r3, #5
 800191c:	d10c      	bne.n	8001938 <HAL_RCC_OscConfig+0x340>
 800191e:	4b61      	ldr	r3, [pc, #388]	@ (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 8001920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001922:	4a60      	ldr	r2, [pc, #384]	@ (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 8001924:	f043 0304 	orr.w	r3, r3, #4
 8001928:	6713      	str	r3, [r2, #112]	@ 0x70
 800192a:	4b5e      	ldr	r3, [pc, #376]	@ (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 800192c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800192e:	4a5d      	ldr	r2, [pc, #372]	@ (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6713      	str	r3, [r2, #112]	@ 0x70
 8001936:	e00b      	b.n	8001950 <HAL_RCC_OscConfig+0x358>
 8001938:	4b5a      	ldr	r3, [pc, #360]	@ (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 800193a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800193c:	4a59      	ldr	r2, [pc, #356]	@ (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 800193e:	f023 0301 	bic.w	r3, r3, #1
 8001942:	6713      	str	r3, [r2, #112]	@ 0x70
 8001944:	4b57      	ldr	r3, [pc, #348]	@ (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 8001946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001948:	4a56      	ldr	r2, [pc, #344]	@ (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 800194a:	f023 0304 	bic.w	r3, r3, #4
 800194e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d015      	beq.n	8001984 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001958:	f7ff f8fa 	bl	8000b50 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800195e:	e00a      	b.n	8001976 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001960:	f7ff f8f6 	bl	8000b50 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800196e:	4293      	cmp	r3, r2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e0d7      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001976:	4b4b      	ldr	r3, [pc, #300]	@ (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 8001978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0ee      	beq.n	8001960 <HAL_RCC_OscConfig+0x368>
 8001982:	e014      	b.n	80019ae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001984:	f7ff f8e4 	bl	8000b50 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800198a:	e00a      	b.n	80019a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800198c:	f7ff f8e0 	bl	8000b50 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800199a:	4293      	cmp	r3, r2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e0c1      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a2:	4b40      	ldr	r3, [pc, #256]	@ (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 80019a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1ee      	bne.n	800198c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019ae:	7dfb      	ldrb	r3, [r7, #23]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d105      	bne.n	80019c0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b4:	4b3b      	ldr	r3, [pc, #236]	@ (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 80019b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b8:	4a3a      	ldr	r2, [pc, #232]	@ (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 80019ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 80ad 	beq.w	8001b24 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019ca:	4b36      	ldr	r3, [pc, #216]	@ (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 030c 	and.w	r3, r3, #12
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	d060      	beq.n	8001a98 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d145      	bne.n	8001a6a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019de:	4b33      	ldr	r3, [pc, #204]	@ (8001aac <HAL_RCC_OscConfig+0x4b4>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e4:	f7ff f8b4 	bl	8000b50 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ec:	f7ff f8b0 	bl	8000b50 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e093      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019fe:	4b29      	ldr	r3, [pc, #164]	@ (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69da      	ldr	r2, [r3, #28]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	431a      	orrs	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a18:	019b      	lsls	r3, r3, #6
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a20:	085b      	lsrs	r3, r3, #1
 8001a22:	3b01      	subs	r3, #1
 8001a24:	041b      	lsls	r3, r3, #16
 8001a26:	431a      	orrs	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a2c:	061b      	lsls	r3, r3, #24
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a34:	071b      	lsls	r3, r3, #28
 8001a36:	491b      	ldr	r1, [pc, #108]	@ (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001aac <HAL_RCC_OscConfig+0x4b4>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a42:	f7ff f885 	bl	8000b50 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4a:	f7ff f881 	bl	8000b50 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e064      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a5c:	4b11      	ldr	r3, [pc, #68]	@ (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0f0      	beq.n	8001a4a <HAL_RCC_OscConfig+0x452>
 8001a68:	e05c      	b.n	8001b24 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6a:	4b10      	ldr	r3, [pc, #64]	@ (8001aac <HAL_RCC_OscConfig+0x4b4>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a70:	f7ff f86e 	bl	8000b50 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a78:	f7ff f86a 	bl	8000b50 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e04d      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a8a:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f0      	bne.n	8001a78 <HAL_RCC_OscConfig+0x480>
 8001a96:	e045      	b.n	8001b24 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d107      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e040      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40007000 	.word	0x40007000
 8001aac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ab0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b30 <HAL_RCC_OscConfig+0x538>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d030      	beq.n	8001b20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d129      	bne.n	8001b20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d122      	bne.n	8001b20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ae6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d119      	bne.n	8001b20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af6:	085b      	lsrs	r3, r3, #1
 8001af8:	3b01      	subs	r3, #1
 8001afa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d10f      	bne.n	8001b20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d107      	bne.n	8001b20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e000      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40023800 	.word	0x40023800

08001b34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e07b      	b.n	8001c3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d108      	bne.n	8001b60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001b56:	d009      	beq.n	8001b6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	61da      	str	r2, [r3, #28]
 8001b5e:	e005      	b.n	8001b6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d106      	bne.n	8001b8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7fe fe40 	bl	800080c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ba2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bf0:	ea42 0103 	orr.w	r1, r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bf8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	0c1b      	lsrs	r3, r3, #16
 8001c0a:	f003 0104 	and.w	r1, r3, #4
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c12:	f003 0210 	and.w	r2, r3, #16
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	69da      	ldr	r2, [r3, #28]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b088      	sub	sp, #32
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	60f8      	str	r0, [r7, #12]
 8001c4e:	60b9      	str	r1, [r7, #8]
 8001c50:	603b      	str	r3, [r7, #0]
 8001c52:	4613      	mov	r3, r2
 8001c54:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c56:	f7fe ff7b 	bl	8000b50 <HAL_GetTick>
 8001c5a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001c5c:	88fb      	ldrh	r3, [r7, #6]
 8001c5e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d001      	beq.n	8001c70 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	e12a      	b.n	8001ec6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d002      	beq.n	8001c7c <HAL_SPI_Transmit+0x36>
 8001c76:	88fb      	ldrh	r3, [r7, #6]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e122      	b.n	8001ec6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d101      	bne.n	8001c8e <HAL_SPI_Transmit+0x48>
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e11b      	b.n	8001ec6 <HAL_SPI_Transmit+0x280>
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2203      	movs	r2, #3
 8001c9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	88fa      	ldrh	r2, [r7, #6]
 8001cae:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	88fa      	ldrh	r2, [r7, #6]
 8001cb4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001cdc:	d10f      	bne.n	8001cfe <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001cec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001cfc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d08:	2b40      	cmp	r3, #64	@ 0x40
 8001d0a:	d007      	beq.n	8001d1c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d24:	d152      	bne.n	8001dcc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d002      	beq.n	8001d34 <HAL_SPI_Transmit+0xee>
 8001d2e:	8b7b      	ldrh	r3, [r7, #26]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d145      	bne.n	8001dc0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d38:	881a      	ldrh	r2, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d44:	1c9a      	adds	r2, r3, #2
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	3b01      	subs	r3, #1
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001d58:	e032      	b.n	8001dc0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d112      	bne.n	8001d8e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6c:	881a      	ldrh	r2, [r3, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d78:	1c9a      	adds	r2, r3, #2
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	3b01      	subs	r3, #1
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001d8c:	e018      	b.n	8001dc0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d8e:	f7fe fedf 	bl	8000b50 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d803      	bhi.n	8001da6 <HAL_SPI_Transmit+0x160>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da4:	d102      	bne.n	8001dac <HAL_SPI_Transmit+0x166>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d109      	bne.n	8001dc0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e082      	b.n	8001ec6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1c7      	bne.n	8001d5a <HAL_SPI_Transmit+0x114>
 8001dca:	e053      	b.n	8001e74 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d002      	beq.n	8001dda <HAL_SPI_Transmit+0x194>
 8001dd4:	8b7b      	ldrh	r3, [r7, #26]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d147      	bne.n	8001e6a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	330c      	adds	r3, #12
 8001de4:	7812      	ldrb	r2, [r2, #0]
 8001de6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dec:	1c5a      	adds	r2, r3, #1
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001e00:	e033      	b.n	8001e6a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d113      	bne.n	8001e38 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	330c      	adds	r3, #12
 8001e1a:	7812      	ldrb	r2, [r2, #0]
 8001e1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	1c5a      	adds	r2, r3, #1
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001e36:	e018      	b.n	8001e6a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e38:	f7fe fe8a 	bl	8000b50 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d803      	bhi.n	8001e50 <HAL_SPI_Transmit+0x20a>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e4e:	d102      	bne.n	8001e56 <HAL_SPI_Transmit+0x210>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d109      	bne.n	8001e6a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e02d      	b.n	8001ec6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1c6      	bne.n	8001e02 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e74:	69fa      	ldr	r2, [r7, #28]
 8001e76:	6839      	ldr	r1, [r7, #0]
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f000 f8b1 	bl	8001fe0 <SPI_EndRxTxTransaction>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d002      	beq.n	8001e8a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2220      	movs	r2, #32
 8001e88:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10a      	bne.n	8001ea8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e000      	b.n	8001ec6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
  }
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3720      	adds	r7, #32
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b088      	sub	sp, #32
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	603b      	str	r3, [r7, #0]
 8001edc:	4613      	mov	r3, r2
 8001ede:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001ee0:	f7fe fe36 	bl	8000b50 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ee8:	1a9b      	subs	r3, r3, r2
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	4413      	add	r3, r2
 8001eee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001ef0:	f7fe fe2e 	bl	8000b50 <HAL_GetTick>
 8001ef4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001ef6:	4b39      	ldr	r3, [pc, #228]	@ (8001fdc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	015b      	lsls	r3, r3, #5
 8001efc:	0d1b      	lsrs	r3, r3, #20
 8001efe:	69fa      	ldr	r2, [r7, #28]
 8001f00:	fb02 f303 	mul.w	r3, r2, r3
 8001f04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f06:	e054      	b.n	8001fb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f0e:	d050      	beq.n	8001fb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001f10:	f7fe fe1e 	bl	8000b50 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	69fa      	ldr	r2, [r7, #28]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d902      	bls.n	8001f26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d13d      	bne.n	8001fa2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001f34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f3e:	d111      	bne.n	8001f64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f48:	d004      	beq.n	8001f54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f52:	d107      	bne.n	8001f64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f6c:	d10f      	bne.n	8001f8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e017      	b.n	8001fd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	68ba      	ldr	r2, [r7, #8]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	bf0c      	ite	eq
 8001fc2:	2301      	moveq	r3, #1
 8001fc4:	2300      	movne	r3, #0
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	461a      	mov	r2, r3
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d19b      	bne.n	8001f08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3720      	adds	r7, #32
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000000 	.word	0x20000000

08001fe0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af02      	add	r7, sp, #8
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	2102      	movs	r1, #2
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f7ff ff6a 	bl	8001ed0 <SPI_WaitFlagStateUntilTimeout>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d007      	beq.n	8002012 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002006:	f043 0220 	orr.w	r2, r3, #32
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e032      	b.n	8002078 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002012:	4b1b      	ldr	r3, [pc, #108]	@ (8002080 <SPI_EndRxTxTransaction+0xa0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a1b      	ldr	r2, [pc, #108]	@ (8002084 <SPI_EndRxTxTransaction+0xa4>)
 8002018:	fba2 2303 	umull	r2, r3, r2, r3
 800201c:	0d5b      	lsrs	r3, r3, #21
 800201e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002022:	fb02 f303 	mul.w	r3, r2, r3
 8002026:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002030:	d112      	bne.n	8002058 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	2200      	movs	r2, #0
 800203a:	2180      	movs	r1, #128	@ 0x80
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f7ff ff47 	bl	8001ed0 <SPI_WaitFlagStateUntilTimeout>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d016      	beq.n	8002076 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800204c:	f043 0220 	orr.w	r2, r3, #32
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e00f      	b.n	8002078 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00a      	beq.n	8002074 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	3b01      	subs	r3, #1
 8002062:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800206e:	2b80      	cmp	r3, #128	@ 0x80
 8002070:	d0f2      	beq.n	8002058 <SPI_EndRxTxTransaction+0x78>
 8002072:	e000      	b.n	8002076 <SPI_EndRxTxTransaction+0x96>
        break;
 8002074:	bf00      	nop
  }

  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	20000000 	.word	0x20000000
 8002084:	165e9f81 	.word	0x165e9f81

08002088 <memset>:
 8002088:	4402      	add	r2, r0
 800208a:	4603      	mov	r3, r0
 800208c:	4293      	cmp	r3, r2
 800208e:	d100      	bne.n	8002092 <memset+0xa>
 8002090:	4770      	bx	lr
 8002092:	f803 1b01 	strb.w	r1, [r3], #1
 8002096:	e7f9      	b.n	800208c <memset+0x4>

08002098 <__libc_init_array>:
 8002098:	b570      	push	{r4, r5, r6, lr}
 800209a:	4d0d      	ldr	r5, [pc, #52]	@ (80020d0 <__libc_init_array+0x38>)
 800209c:	4c0d      	ldr	r4, [pc, #52]	@ (80020d4 <__libc_init_array+0x3c>)
 800209e:	1b64      	subs	r4, r4, r5
 80020a0:	10a4      	asrs	r4, r4, #2
 80020a2:	2600      	movs	r6, #0
 80020a4:	42a6      	cmp	r6, r4
 80020a6:	d109      	bne.n	80020bc <__libc_init_array+0x24>
 80020a8:	4d0b      	ldr	r5, [pc, #44]	@ (80020d8 <__libc_init_array+0x40>)
 80020aa:	4c0c      	ldr	r4, [pc, #48]	@ (80020dc <__libc_init_array+0x44>)
 80020ac:	f000 f818 	bl	80020e0 <_init>
 80020b0:	1b64      	subs	r4, r4, r5
 80020b2:	10a4      	asrs	r4, r4, #2
 80020b4:	2600      	movs	r6, #0
 80020b6:	42a6      	cmp	r6, r4
 80020b8:	d105      	bne.n	80020c6 <__libc_init_array+0x2e>
 80020ba:	bd70      	pop	{r4, r5, r6, pc}
 80020bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80020c0:	4798      	blx	r3
 80020c2:	3601      	adds	r6, #1
 80020c4:	e7ee      	b.n	80020a4 <__libc_init_array+0xc>
 80020c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80020ca:	4798      	blx	r3
 80020cc:	3601      	adds	r6, #1
 80020ce:	e7f2      	b.n	80020b6 <__libc_init_array+0x1e>
 80020d0:	08002110 	.word	0x08002110
 80020d4:	08002110 	.word	0x08002110
 80020d8:	08002110 	.word	0x08002110
 80020dc:	08002114 	.word	0x08002114

080020e0 <_init>:
 80020e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020e2:	bf00      	nop
 80020e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020e6:	bc08      	pop	{r3}
 80020e8:	469e      	mov	lr, r3
 80020ea:	4770      	bx	lr

080020ec <_fini>:
 80020ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ee:	bf00      	nop
 80020f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020f2:	bc08      	pop	{r3}
 80020f4:	469e      	mov	lr, r3
 80020f6:	4770      	bx	lr
